import numpy as np

import plots as plt
import linear_regression as lr

from helpers import *

"""
Train linear regression using gradient descent on `./data/train.data`
`train.data` is generated by `../prep_data.sh`

This will find best theta, lambda, and degree of polynomial based
on train.data and cv.data. Results are saved to ./params.npz
"""

# import code; code.interact(local=dict(globals(), **locals()))

# A bunch of settings to tune linear regression
alpha = 0.03 # learning rate
lambdas = [0, 0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1, 3, 10] # regularisation values
polys = range(0, 6) # degrees of polynoomial to try
iterations = 10000 # train over this many iterations of gradient descent


##########
# Find optimum value for p and lambda

best_p = None
best_l = None
best_theta = None
best_cost = None

costings = {}

for p in polys:

  costings[p] = []

  print '----------'
  print 'p = {}'.format(p)

  for l in lambdas:
    print '---'
    print "Lambda = {}".format(l)
    [X, y, _] = data_from_file('./data/train.data', p)

    theta = np.matrix(np.zeros([X.shape[1], 1]))
    [theta, cost_history] = lr.gradient_descent(X, y, theta, alpha, l, iterations)

    [X, y, _] = data_from_file('./data/cv.data', p)

    predictions = X*theta

    cv_cost = lr.cost(X, y, theta, l)

    if best_cost == None or cv_cost < best_cost:
      best_cost = cv_cost
      best_p = p
      best_l = l
      best_theta = theta

    costings[p].append(cv_cost)

    print "CV cost = {}".format(cv_cost)

plt.poly_lambda_error(lambdas, costings)

p = best_p
l = best_l
theta = best_theta

print "Best lambda is: {}. Best p is {}. C.V. cost {}".format(l, p, best_cost)


##########
# Train harder with best p and lambda

iterations = 100000

print '----------'
print "Training theta with best lambda and degree of polynomial over {} iterations".format(iterations)

[X, y, _] = data_from_file('./data/train.data', p)

theta = np.matrix(np.zeros([X.shape[1], 1]))
[theta, cost_history] = lr.gradient_descent(X, y, theta, alpha, l, iterations)

plt.cost_history(cost_history)

# Save learned lambda, p, and theta to file
np.savez('params', l=l, p=p, theta=theta)
